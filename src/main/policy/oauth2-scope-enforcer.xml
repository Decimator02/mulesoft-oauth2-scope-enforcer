<?xml version="1.0" encoding="UTF-8"?>
<!-- 
#
# Copyright (c) 2017 The Trustees of Columbia University in the City of New York
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
-->
<policy xmlns="http://www.mulesoft.org/schema/mule/policy"
   id="{{policyId}}"
   order="6000"
   policyName="OAuth 2.0 Scope Enforcement Policy"
   online="true"
   requiresContracts="true"
   xmlns:mule="http://www.mulesoft.org/schema/mule/core"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
   xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
   xsi:schemaLocation="http://www.mulesoft.org/schema/mule/policy http://www.mulesoft.org/schema/mule/policy/current/mule-policy.xsd
                       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
                       http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
                       http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd">

  <!-- Apply configurations to specific methods & resources: A pointcut for each configured condition. -->
  {{#pointcutData}}
  <pointcut>
    <api-platform-gw:api-pointcut apiName="{{ apiName }}" apiVersion="{{ apiVersionName }}"/>
    <resource methodRegex="{{ methodRegex }}" uriTemplateRegex="{{ uriTemplateRegex }}"/>
  </pointcut>
  {{/pointcutData}}

  <!-- Apply configurations to all API methods & resources: A single pointcut for everything. -->
  {{^pointcutData.length}}
  <pointcut>
    <api-platform-gw:api-pointcut apiName="{{ apiName }}" apiVersion="{{ apiVersionName }}"/>
  </pointcut>
  {{/pointcutData.length}}

  <mule:processor-chain xmlns:mule="http://www.mulesoft.org/schema/mule/core" name="pyViolation">
    <mule:logger message="Policy {{ policyId }} #[flowVars.pyError]: #[flowVars.pyErrorDescription]" level="WARN" />
    <mule:set-property propertyName="http.status" value="#[flowVars.pyStatus]"/>
    <mule:set-property propertyName="Content-Type" value="application/json"/>
    <mule:set-payload value='{ "error": "#[flowVars.pyError]", "error_description" : "Policy {{ policyId }}: #[flowVars.pyErrorDescription]"}'/>
  </mule:processor-chain>
  <before>
    <scripting:component>
      <scripting:script engine="jython"><![CDATA[
import json
import re
from HTMLParser import HTMLParser

httpVerbs = ['get','post','put','update','patch','delete']

def doit():
  class ret:
    pyStatus = 503
    pyError = 'policy_misconfigured'
    pyErrorDescription = 'unknown misconfiguration'

  enterpriseValidation = {
  {{#enterpriseValidation}}
    '{{ key }}': '{{ value }}',
  {{/enterpriseValidation}}
  }

  enterpriseScopeAlternates = set([k for k in enterpriseValidation])

  # Version 1.x of this policy used keyvalues configuration of the scopeMap variable.
  # Version 2.x pastes a JSON document into a string but retains the old keyvalues structure (for now).

  _s = '{{ scopeMap }}'
  mustacheMap = json.loads(HTMLParser().unescape(_s))

  scopeMap = {}

  log.debug('Policy {{policyId}}: ScopeMap:')
  for key,value in mustacheMap.items():
    try:
      verb,resource=key.split(':')
    except ValueError:
      ret.pyErrorDescription = 'key (%s) must be method:resource'%key
      return ret
    if resource[-1] != '$': # force a complete match
      resource = resource + '$'
    if verb not in httpVerbs:
      ret.pyErrorDescription = 'method (%s) must be one of: %s'%(verb,', '.join(httpVerbs))
      return ret
    scopeMap[key] = {
      'verb': verb,
      'scopes': value, # a list of lists of alternate scopes [['scope1',...,'scopeN'],...,['alt1',...,'altN']]
      're': re.compile(resource)
    }
    log.debug('Policy {{policyId}}: %s:%s %s'%(verb,resource,value))

  if '_agwTokenContext' in flowVars:
    map = json.loads(flowVars['_agwTokenContext']) # dig the scope list out of the JSON map:
  else:
    ret.pyStatus = 403
    ret.pyError = 'invalid_scope'
    ret.pyErrorDescription = 'required Access Token is missing.'
    log.debug('Policy {{policyId}}: flowVars._agwTokenContext is missing. Check upstream policy.')
    return ret
  scope = map['scope'] if 'scope' in map else ''
  log.debug('Policy {{policyId}}: Access token (granted) scopes: "%s"'%scope)
  scopeList = scope.split(' ') if isinstance(scope, basestring) else scope
  scopeList = [scopeList] if isinstance(scopeList, basestring) else scopeList # ensure scopeList is a list
  # do enterprise scope validation. If any alternates configured, at least one must be in the scopeList
  if enterpriseScopeAlternates:
    log.debug('Policy {{policyId}}: Enterprise validation scope alternatives: "%s"'%' | '.join([k for k in enterpriseValidation]))
    if set(scopeList).isdisjoint(enterpriseScopeAlternates):
      ret.pyStatus = 403
      ret.pyError = 'invalid_scope'
      ret.pyErrorDescription = 'Access Token does not have any of the required enterprise scopes: %s'%' '.join([k for k in enterpriseValidation])
      log.debug('Policy {{policyId}}: No enterprise validation scope alternatives found in the granted scopes.')
      return ret
    groupAttr = None
    skipValidation = False
    for e in enterpriseValidation:
      if e in scopeList:
        groupAttr = enterpriseValidation[e] if e != 'auth-none' else ' SKIP '
        break
    if groupAttr == ' SKIP ':
      log.debug('Policy {{policyId}}: auth-none scope: skipping enterprise validation.')
    elif groupAttr and 'access_token' in map and groupAttr in map['access_token']:
      groups = map['access_token'][groupAttr]
      effective_scopelist = set(scopeList).intersection(set(groups.split(' ')))
      effective_scope = ' '.join(effective_scopelist)
      scope = effective_scope
      log.debug('Policy {{policyId}}: Enterprise groups: "%s"'%groups)
      log.debug('Policy {{policyId}}: Enterprise validation results in effective scopes: "%s"'%scope)
    else:
      ret.pyStatus = 503
      ret.pyError = 'policy_misconfigured'
      ret.pyErrorDescription = 'Enterprise validation attribute (%s) was not found in Access Token.'%groupAttr
      log.debug('Policy {{policyId}}: Group attr "%s" is not found in the access token.')
      return ret
  else:
    log.debug('Policy {{policyId}}: No enterprise validation scope alternatives.')
  flowVars['scope'] = scope # expose the scopes to downstream app
  # look for configured required scopes for this method and resource:
  # strip the listener path out of the URL
  #    http.listener.path=/v1/api/*
  #     http.request.path=/v1/api/things
  listenerPath = message.getInboundProperty('http.listener.path')
  method = message.getInboundProperty('http.method').lower()
  requestPath = message.getInboundProperty('http.request.path')
  requiredScopes = []
  # search for a match. If none found, default to fail closed.
  ret.pyStatus = 503
  ret.pyError = 'policy_misconfigured'
  ret.pyErrorDescription = 'No configured matching method:resource'
  if requestPath.find(listenerPath[:-2]) == 0: # remove the '/*'
    resource = requestPath[len(listenerPath)-2:]
    for k,v in scopeMap.items():
      if v['verb'] == method and v['re'].match(resource):
        requiredScopes = v['scopes'] # a list of alternative lists
        ret.pyStatus = 200
        ret.pyError = 'OK'
        ret.pyErrorDescription = 'OK'
        log.debug('Policy {{policyId}}: Found a match in the scopeMap for "%s:%s" requiring scopes: "%s"'%(method,resource,requiredScopes))
        break
  else:
    ret.pyStatus = 503
    ret.pyError = 'policy_misconfigured'
    ret.pyErrorDescription = "request path (%s) doesn't match listener path (%s)."%(requestPath,listenerPath)
  log.debug('Policy {{policyId}}: Checking if provided and required scopes match: requiredScopes is: "%s"; scopeList is: "%s"'%(requiredScopes,scopeList))
  if requiredScopes:
    flowVars['requiredScopes'] = requiredScopes
    # find any matching required scope list from the alternatives offered
    for r in requiredScopes:
      if set(r).issubset(set(scopeList)):
	ret.pyStatus = 200
	ret.pyError = 'OK'
	ret.pyErrorDescription = 'OK'
	log.debug('Policy {{policyId}}: %s %s: %s'%(ret.pyStatus,ret.pyError,ret.pyErrorDescription))
        return ret
    ret.pyStatus = 403
    ret.pyError = 'invalid_scope'
    enterprise = 'enterprise ' if enterpriseScopeAlternates else ''
    ret.pyErrorDescription = 'Access Token does not have one or more of the required %sscopes: %s'%(enterprise,requiredScopes)
  else: # it's not OK to explicitly configure no requiredScopes.
    ret.pyStatus = 503
    ret.pyError = 'policy_misconfigured'
    ret.pyErrorDescription = 'request path (%s) has no required scopes: Configure Method & Resource conditions.'%requestPath
  log.debug('Policy {{policyId}}: %s %s: %s'%(ret.pyStatus,ret.pyError,ret.pyErrorDescription))
  return ret

ret = doit()
flowVars['pyStatus'] = ret.pyStatus
flowVars['pyError'] = ret.pyError
flowVars['pyErrorDescription'] = ret.pyErrorDescription
result=payload
]]>
      </scripting:script>
    </scripting:component>
    <mule:message-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" onUnaccepted="pyViolation">
      <mule:expression-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" expression="#[flowVars.pyStatus == 200]"/>
    </mule:message-filter>
    <mule:remove-variable variableName="pyStatus"/>
    <mule:remove-variable variableName="pyError"/>
    <mule:remove-variable variableName="pyErrorDescription"/>
  </before>

</policy>
