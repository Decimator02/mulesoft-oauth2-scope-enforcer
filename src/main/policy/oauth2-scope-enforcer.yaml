#
# Copyright (c) 2017 The Trustees of Columbia University in the City of New York
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
name: OAuth 2.0 Scope Enforcement Policy
description: >-
  **This is version 2.x of the OAuth 2.0 Scope Enforcement Policy. It includes breaking changes from version 1.x.**

  This policy validates OAuth 2.0 required scopes for each method & resource and optionally adds _enterprise
  scope validation_ in which group memberships from the enterprise's authn/z system are intersected with granted
  scopes to create _effective scope_ grants.

  **Configuring Enterprise OAuth 2.0 scopes validation**

  Provide the triggering scope and group attribute name. The triggering scope causes enterprise validation for
  the given attribute that is in the OAuth 2.0 validation result's access\_token (\_agwTokenContext).
  For example: *auth-columbia*:*group* is used when the *auth-columbia* scope is present and the
  access\_token contains a `group` attribute that is a list of "OAuth groups" the user is a member of.

  The first matching triggering scope is used and any other matching triggers will be ignored.

  If any enterprise scope triggers are provided, **at least one of them must be present** in the Access Token's
  list of granted scopes.

  This group list will be intersected with the OAuth 2.0 granted scope list to produce the _effective scope_ list
  which will then be tested for scope enforcement.

  **Configuring resource and method required scopes**

  Paste a JSON policy document as produced by [ramlpolicy.py](https://github.com/n2ygk/mulesoft-oauth2-scope-enforcer/blob/v2/ramlpolicy.py)
  (which parses the API's RAML file) or create one manually. Here's an example:

  ```{
   "post:/things": [["auth-columbia", "demo-netphone-admin", "openid", "create"],
                    ["auth-google"],
                    ["auth-facebook"]],
   "put:/things/.+": [["auth-columbia", "openid", "update"]],
   "get:/things": [["auth-columbia", "openid", "read"],
                   ["auth-google", "openid", "read"],
                   ["auth-facebook", "openid", "read"]],
   "get:/things/.+": [["openid", "read"]],
   "get:/things/.+/foo": []
  }```

  The keys are the method:resource regex pattern and the values are lists of alternative lists of scopes that must be present.

  **flowVars**

  As a convenience, this policy also sets the following flowVars for use by subsequent modules in the flow:
  -  **scope**: (effective) list of granted scopes
  -  **requiredScopes**: list of required scopes configured by this policy for this method & resource

id: oauth2-scope-enforcer
# new feature as of 3.8.x: resource-level policy
resourceLevelSupported: true
providedCharacteristics:
  - OAuth 2.0 scope enforcement
requiredCharacteristics:
  - OAuth 2.0 protected
requiresConnectivity: true
standalone: true
type: custom
category: Security
configuration:
  - propertyName: enterpriseValidation
    name: Enterprise OAuth 2.0 scopes validation
    sensitive: false
    type: keyvalues
    optional: true
    allowMultiple: true
  - propertyName: scopeMap
    name: scopeMap
    description: JSON map of method:resource regular expressions and lists of scopes. Output of ramlpolicy.py.
    type: string
    optional: true
    allowMultiple: false
