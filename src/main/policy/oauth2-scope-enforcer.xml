<?xml version="1.0" encoding="UTF-8"?>
<!-- 
#
# Copyright (c) 2017 The Trustees of Columbia University in the City of New York
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
-->
<policy xmlns="http://www.mulesoft.org/schema/mule/policy"
   id="{{policyId}}"
   order="6000"
   policyName="OAuth 2.0 Scope Enforcement Policy"
   online="true"
   requiresContracts="true"
   xmlns:mule="http://www.mulesoft.org/schema/mule/core"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
   xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
   xsi:schemaLocation="http://www.mulesoft.org/schema/mule/policy http://www.mulesoft.org/schema/mule/policy/current/mule-policy.xsd
		       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		       http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
		       http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd">

  <pointcut>
    <api-platform-gw:api-pointcut apiName="{{ apiName }}" apiVersion="{{ apiVersionName }}"/>
  </pointcut>
  <mule:processor-chain xmlns:mule="http://www.mulesoft.org/schema/mule/core" name="invalidScopeViolation">
    <mule:logger message="Policy {{ policyId }} filtered the message #[message.getId()] based on OAuth 2.0 scope validation" level="INFO" />
    <mule:set-property propertyName="http.status" value="403"/>
    <mule:set-property propertyName="Content-Type" value="application/json"/>
    <mule:set-payload value='{ "error": "invalid_scope", "error_description" : "Policy {{ policyId }}: Access Token does not have the required scope(s): #[flowVars.requiredScopes]"}'/>
  </mule:processor-chain>
  <before>
    <scripting:component>
      <scripting:script engine="jython"><![CDATA[
import json
scopeMap = {
{{#scopeMap}}
  '{{ key }}': '{{ value }}',
{{/scopeMap}}
}
# dig the scope list out of the JSON map:
r = flowVars['_agwTokenContext']
map = json.loads(r) if r else {}
scope = map['scope'] if 'scope' in map else ''
flowVars['scope'] = scope # expose the scope to downstream app
# look for configured required scopes for this method and resource:
# strip the listener path out of the URL
#    http.listener.path=/v1/api/*
#     http.request.path=/v1/api/things
# TODO: deal with a pattern match when URI-params are involved (get:/things/{id}).
listenerPath = message.getInboundProperty('http.listener.path')
method = message.getInboundProperty('http.method').lower()
requestPath = message.getInboundProperty('http.request.path')
if requestPath.find(listenerPath[:-2]) == 0: # remove the '/*'
  resource = requestPath[len(listenerPath)-2:]
  scopeMapKey = method+':'+resource.replace('/','&#x2F;') # they HTML-quote the '/'
  #print("scopeMapkey is %s"%scopeMapKey)
  #print(scopeMap)
  if scopeMapKey in scopeMap:
    requiredScopes = scopeMap[scopeMapKey]
    #print("Required Scopes: %s. Granted Scopes: %s. Now intersect them!"%(requiredScopes,scope))
  else:
    requiredScopes = ''
else:
  print("request path doesn't match listener path")
  requiredScopes = ''
flowVars['requiredScopes'] = requiredScopes
flowVars['pyStatus'] = 200
if requiredScopes:
  if not set(requiredScopes.split(' ')).issubset(set(scope.split(' '))):
    print("Required Scopes are missing.")
    flowVars['pyStatus'] = 403
result=payload
]]>
      </scripting:script>
    </scripting:component>
    <mule:message-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" onUnaccepted="invalidScopeViolation">
      <mule:expression-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" expression="#[flowVars.pyStatus == 200]"/>
    </mule:message-filter>
  </before>

</policy>
